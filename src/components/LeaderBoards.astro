---
import type { Modes, TypesLeaderBoardGlobal } from "@/utils";
import { getLeaderboard } from "@/services/leaderboard";
import Trophy from "@/assets/icons/Trophy.svg";
import { Image } from "astro:assets";
import Add from "@/assets/icons/Add.svg";
import Sword from "@/assets/icons/Sword.svg";
import KD from "@/assets/icons/KD.svg";
import Elo from "@/assets/icons/Elo.svg";
import Koth from "@/assets/icons/Koth.svg";
import MaxStreak from "@/assets/icons/MaxStreak.svg";
import Level from "@/assets/icons/Level.svg";
import Subtract from "@/assets/icons/Subtract.svg";
import {typeLabels} from '@/utils'

interface Props {
  mode: Modes;
  type: TypesLeaderBoardGlobal;
}

const { mode, type } = Astro.props;

const {data} = await getLeaderboard({ mode, type });

const trophyColors = {
  1: "#FFD700",
  2: "#C0C0C0",
  3: "#CD7F32",
};

const typeIconMap: Record<TypesLeaderBoardGlobal, any> = {
  kills: {
    component: Sword,
    color: "#DC143C",
  },
  kd: {
    component: KD,
    color: "#DC143C",
  },
  elo: {
    component: Elo,
    color: "#FFD700",
  },
  koth: {
    component: Koth,
    color: "#DC143C",
  },
  maxstreak: {
    component: MaxStreak,
    color: "#FF851B",
  },
  level: {
    component: Level,
    color: "#2ECC40",
  },
};

const IconComponent = typeIconMap[type].component;
const IconColor = typeIconMap[type].color;



// Cache control for performance optimization
// Astro.response.headers.set("Cache-Control", "public, max-age=30");
---

<div class="leaderboard-container">
  <div class="title">
    <span class="rank">#</span>
    <span class="player">Jugador</span>
    <span class="value">{typeLabels[type]}</span>
    <span class="update">Ultima Actualizaci√≥n</span>
  </div>
  <div class="content">
    {
      data && data.length > 0 ? (
        data.map((player) => (
          <a
            class={`data ${player.rank <= 3 ? `top-${player.rank}` : ""}`}
            href={`players/${player.userProfile.uuid}`}
          >
            <span class="rank">
              {player.rank <= 3 ? (
                <Trophy
                  width={32}
                  height={32}
                  color={trophyColors[player.rank as keyof typeof trophyColors]}
                />
              ) : (
                <span class="numeric-rank">{player.rank}</span>
              )}
            </span>
            <span class="player">
              <Image
                src={
                  player.userProfile.premiumId
                    ? `https://render.crafty.gg/3d/bust/${player.userProfile.premiumId}`
                    : player.userProfile.skinUUID
                      ? `https://render.crafty.gg/3d/bust/${player.userProfile.skinUUID}`
                      : `https://render.crafty.gg/3d/bust/null`
                }
                alt={"asd"}
                width={60}
                height={60}
                class="player-image"
              />
              {player.userProfile.lastNickname}
            </span>
            
            <span class="value">
              <div class="value-content">
                {IconComponent && <IconComponent width={24} height={24} color={IconColor} />}
                {/* <Sword width={100} height={100} color={IconColor}/> */}
                <span>{player.value}</span>
              </div>
            </span>
            <span class="update">
              <div class="update-content">
                {player.dailyDelta > 0 && <Add color="#4CAF50" width={24} height={24} />}
                {player.dailyDelta < 0 && <Subtract color="#F44336" width={24} height={24} />}
                <span class="update-value">{player.dailyDelta < 0 ? Math.abs(player.dailyDelta) : player.dailyDelta}</span>

              </div>
            </span>
          </a>
        ))
      ) : (
        <div class="no-data">No se encontraron resultados</div>
      )
    }
  </div>
</div>

<style>
  .leaderboard-container {
    border: 1px solid var(--color-divider);
    padding: 1rem;

    @media (width > 1024px) {
      padding: 2.5rem;
    }
  }

  .title {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    padding: 0 1rem;
    margin-bottom: 1rem;

    & span {
      font-weight: 500;
      font-size: var(--fs-sm);
      opacity: 0.4;

      @media (width > 1024px) {
        font-size: var(--fs-md);
      }
    }
  }

  .rank {
    width: 10%;
    text-align: left;
    align-content: center;
  }

  .player {
    width: 30%;
    text-align: left;
    display: flex;
    align-items: center;
    flex-direction: column-reverse;
    gap: 0.5rem;


    @media (width > 1024px) {
      font-size: var(--fs-md);
      flex-direction: row;
      gap: 1rem;
    }
  }

  .value {
    width: 20%;
    text-align: left;
    align-content: center;
  }

  .value-content {
    display: flex;
    gap: 0.3rem;
  }

  .update {
    width: 20%;
    align-content: center;
  }
  .update-content {
    display: flex;
    justify-content: center;
  }

  .content {
    display: flex;
    flex-direction: column;
  }

  .data {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    margin-top: 0.5rem;
    margin-bottom: 0.5rem;
    border: 1px solid var(--color-divider);
    border-radius: 1rem;
    padding: 1rem 0.5rem;
    cursor: pointer;
    transition:
      background-color 0.2s ease,
      transform 200ms ease;

    &:hover {
      background-color: rgb(60 60 60 / 0.3);

      transform: translateX(-1rem);
    }
    & span {
      font-family: "Seven";
      font-weight: 900;
      font-size: var(--fs-md);
    }

    & span:last-child {
      text-align: center;
    }
  }

  .top-1 {
    background-image: linear-gradient(
      90deg,
      rgba(255, 215, 0, 0.15),
      rgba(255, 215, 0, 0.05) 50%,
      rgba(255, 215, 0, 0.01) 90%
    );
  }

  .top-2 {
    background-image: linear-gradient(
      90deg,
      rgba(192, 192, 192, 0.15),
      rgba(192, 192, 192, 0.05) 50%,
      rgba(192, 192, 192, 0.01) 90%
    );
  }

  .top-3 {
    background-image: linear-gradient(
      90deg,
      rgba(205, 127, 50, 0.15),
      rgba(205, 127, 50, 0.05) 50%,
      rgba(205, 127, 50, 0.01) 90%
    );
  }
</style>
